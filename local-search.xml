<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>typeof的用法</title>
    <link href="/2021/06/30/typeof%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2021/06/30/typeof%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>typeof</code> 的一般操作，就是用来判断某个变量是什么类型，从而进行下一步操作。但是最近发现<code>lodash</code>源码中<code>typeof</code>还有如此作用，特记录于此</p><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p>常规操作无非就是判断类型，如下</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> === <span class="hljs-string">'object'</span> <span class="hljs-comment">//true 注：特殊</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> === <span class="hljs-string">'undefined'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">111</span> === <span class="hljs-string">'number'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">'字符串'</span> === <span class="hljs-string">'string'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span> === <span class="hljs-string">'boolean'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'foo'</span>) === <span class="hljs-string">'symbol'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">111n</span> === <span class="hljs-string">'bigint'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> {} === <span class="hljs-string">'object'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> [] === <span class="hljs-string">'object'</span> <span class="hljs-comment">//true</span><br><span class="hljs-keyword">typeof</span> (<span class="hljs-function">() =&gt;</span> {}) === <span class="hljs-string">'function'</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></tbody></table></figure><h2 id="非常规操作"><a href="#非常规操作" class="headerlink" title="非常规操作"></a>非常规操作</h2><p>我们知道，对于未声明的变量，只能执行一个操作，那就是使用<code>typeof</code>判断类型</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//let a = 1  //确保a没有声明</span><br><span class="hljs-keyword">typeof</span> a  <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//报错: Uncaught ReferenceError: a is not defined</span><br></code></pre></td></tr></tbody></table></figure><p>那怎么能让第二个语句不报错，有输出呢？往下看</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">'undefined'</span> &amp;&amp; a) <span class="hljs-comment">//输出false</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p><code>lodash</code>类似源码</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** Detect free variable `global` from Node.js. */</span><br><span class="hljs-keyword">const</span> freeGlobal = <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">global</span> === <span class="hljs-string">'object'</span> &amp;&amp; <span class="hljs-built_in">global</span> !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">global</span>.Object === <span class="hljs-built_in">Object</span> &amp;&amp; <span class="hljs-built_in">global</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> freeGlobal<br></code></pre></td></tr></tbody></table></figure></blockquote></body></html>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>lodash</tag>
      
      <tag>源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eslint 搭配 vscode 的简单使用</title>
    <link href="/2021/05/12/eslint-%E6%90%AD%E9%85%8D-vscode-%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/05/12/eslint-%E6%90%AD%E9%85%8D-vscode-%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚开始时，由于嫌麻烦，并没有安装<code>eslint</code>，最近在新的项目上使用了<code>eslint</code>再配合<code>vscode</code>的插件，真是爽的不要太爽。因此打算写一篇简单的食用说明来记录食用过程</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>没啥好准备的，作为开发肯定是具备<code>yarn</code>和<code>node</code>的，编辑器使用的是微软的亲儿子<code>vscode</code> </p><p>然后新建一个文件夹<code>eslint-example</code>，<code>cd</code>进入这个文件夹并初始化一个<code>package.json</code></p><p>初始化<code>package.json</code>命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yarn init -y<br></code></pre></td></tr></tbody></table></figure><p>文件结构</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> eslint-example<br><span class="hljs-bullet">-</span> package.json<br></code></pre></td></tr></tbody></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先安装<code>eslint</code>，并初始化一个配置文件 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yarn add eslint --dev<br>$ ./node_modules/.bin/eslint --init<br></code></pre></td></tr></tbody></table></figure><p>初始化完成后会在项目的根目录下生成一个配置文件<code>.eslintrc.js</code>（你的可能和我的不一样，但前缀都是一样的） </p><blockquote><p>关于配置文件的一些说明，配置文件可以使用<code>.js</code>，<code>.json</code>，<code>.yaml/.yml</code>后缀或者没有后缀的<code>.eslintrc</code>文件,也可以直接在<code>package.json</code>中添加一个<code>eslintConfig</code>属性进行配置。<code>eslint</code>会读取这个文件，优先级为从左到右依次查找文件格式，没有后缀的配置文件声明已废弃，不建议使用</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = {<br>...<br>    <span class="hljs-comment">//在这里添加自定义规则去覆盖默认规则</span><br>    <span class="hljs-string">"rules"</span>: {<br>        <span class="hljs-comment">//要求或禁止使用分号代替 ASI</span><br>        <span class="hljs-string">"semi"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-string">"always"</span>],<br>        <span class="hljs-comment">//强制使用一致的缩进</span><br>        <span class="hljs-string">"indent"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-number">2</span>],<br>        <span class="hljs-comment">//强制使用一致的反勾号、双引号或单引号</span><br>        <span class="hljs-string">"quotes"</span>: [<span class="hljs-string">"error"</span>, <span class="hljs-string">"double"</span>],<br>        <span class="hljs-comment">//禁用console</span><br>        <span class="hljs-string">"no-console"</span>: <span class="hljs-string">"warn"</span> <span class="hljs-comment">// 可以直接写错误类型</span><br>    }<br>    ...<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>eslint</code>有三种错误规则，可以直接写规则类型也可以直接写数字，错误规则:</p><ul><li><code>error</code>对应数字<code>2</code></li><li><code>warn</code>对应数字<code>1</code></li><li><code>off</code>对应数字<code>0</code> </li></ul><p>在<code>package.json</code>中添加<code>scripts</code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">...<br><span class="hljs-string">"script"</span>: {<br>    <span class="hljs-attr">"lint"</span>: <span class="hljs-string">"eslint --ext .js src"</span><br>}<br>...<br></code></pre></td></tr></tbody></table></figure><p>运行命令验证</p><h2 id="配合vscode插件食用更舒适"><a href="#配合vscode插件食用更舒适" class="headerlink" title="配合vscode插件食用更舒适"></a>配合vscode插件食用更舒适</h2><p>在<code>vscode</code>的插件栏搜索<code>eslint</code>，安装<code>ESLint</code>插件</p><p>然后在<code>settings.json</code>中添加如下配置，对于更详细的配置请查看插件文档<sup>[2]</sup> </p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">...<br><span class="hljs-comment">//为eslint开启自动修复，保存时将触发，但并不能自动修复所有的问题，但已经很爽了</span><br><span class="hljs-string">"editor.codeActionsOnSave"</span>: {<br>    <span class="hljs-attr">"source.fixAll.eslint"</span>: <span class="hljs-literal">true</span><br>},<br></code></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://eslint.org/docs/user-guide/">https://eslint.org/docs/user-guide/</a> </p><p>[2] <a href="https://github.com/Microsoft/vscode-eslint#readme">https://github.com/Microsoft/vscode-eslint#readme</a> </p></body></html>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用canal连接kafka</title>
    <link href="/2021/04/20/%E4%BD%BF%E7%94%A8canal%E8%BF%9E%E6%8E%A5kafka/"/>
    <url>/2021/04/20/%E4%BD%BF%E7%94%A8canal%E8%BF%9E%E6%8E%A5kafka/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="使用canal连接kafka"><a href="#使用canal连接kafka" class="headerlink" title="使用canal连接kafka"></a>使用canal连接kafka</h1><p>这篇主要是项目还原，目的是记录构建时遇到的各种奇葩坑，避免下次迷路。废话不多说，直接上手。</p><blockquote><p>默认已安装<code>docker</code>，<code>docker-compose</code>，<code>nodejs</code>，<code>yarn</code>，<code>typescript</code>  </p></blockquote><ol><li>首先根据 <a href="https://github.com/wurstmeister/kafka-docker/blob/master/docker-compose.yml">kafka-docker</a> 这个官方的仓库下的<code>docker-compose.yml</code>复制一份到自己的项目中</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'2'</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">zookeeper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wurstmeister/zookeeper</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">"2181:2181"</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">"9092"</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-comment"># 更改为自己的ip地址，最好是ip地址，我先使用localhost</span><br>      <span class="hljs-attr">KAFKA_ADVERTISED_HOST_NAME:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-string">zookeeper:2181</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br></code></pre></td></tr></tbody></table></figure><p>将<code>kafka</code>下的<code>build</code>项，更改为<code>kafka</code>镜像，可以从<a href="https://hub.docker.com/r/wurstmeister/kafka">dockerhub</a>中查找指定版本的<code>kafka</code>，这里使用<code>wurstmeister/kafka:2.13-2.7.0</code></p><p>在<code>environment</code>下添加配置属性</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">...</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">wurstmeister/kafka:2.13-2.7.0</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">"9092:9092"</span> <span class="hljs-comment">#向外暴露端口</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">KAFKA_BROKER_ID:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#新增一个broker id</span><br>      <span class="hljs-attr">KAFKA_ADVERTISED_HOST_NAME:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-string">zookeeper:2181</span><br>      <span class="hljs-attr">KAFKA_CREATE_TOPICS:</span> <span class="hljs-string">"test:2:1"</span> <span class="hljs-comment">#新增一个topic或多个 </span><br><span class="hljs-string">...</span><br></code></pre></td></tr></tbody></table></figure><p>然后拉取镜像，并运行起来</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker-compose up<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li><p>编写<code>Producer</code>和<code>Customer</code> </p><p><code>kafkajs</code>版</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//config.ts //简单的配置</span><br><span class="hljs-keyword">const</span> Config = {<br>    <span class="hljs-attr">brokers</span>: [<br>        <span class="hljs-string">"localhost:9092"</span> <span class="hljs-comment">//kafka的服务器</span><br>    ],<br>    <span class="hljs-attr">topic</span>: <span class="hljs-string">'test'</span> <span class="hljs-comment">//与kafka添加的topcs一样</span><br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Config;<br><br><br><span class="hljs-comment">//kafka.ts //实例化一个kafkajs对象</span><br><span class="hljs-keyword">import</span> { Kafka } <span class="hljs-keyword">from</span> <span class="hljs-string">"kafkajs"</span>;<br><span class="hljs-keyword">import</span> Config <span class="hljs-keyword">from</span> <span class="hljs-string">"./config"</span>;<br><br><span class="hljs-keyword">const</span> kafka = <span class="hljs-keyword">new</span> Kafka({<br>    <span class="hljs-attr">clientId</span>: <span class="hljs-string">'kafkajs'</span>,<br>    <span class="hljs-attr">brokers</span>: Config.brokers<br>});<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> kafka;<br><br><span class="hljs-comment">//producer.ts //kafka Producer</span><br><span class="hljs-keyword">import</span> { Message } <span class="hljs-keyword">from</span> <span class="hljs-string">"kafkajs"</span>;<br><span class="hljs-keyword">import</span> Config <span class="hljs-keyword">from</span> <span class="hljs-string">"./config"</span>;<br><span class="hljs-keyword">import</span> kafka <span class="hljs-keyword">from</span> <span class="hljs-string">"./kafka"</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">producer</span>(<span class="hljs-params">messages: Message[]</span>) </span>{<br>    <span class="hljs-keyword">const</span> producer = kafka.producer();<br>    <span class="hljs-keyword">await</span> producer.connect();<br>    <span class="hljs-keyword">await</span> producer.send({<br>        <span class="hljs-attr">topic</span>: Config.topic,<br>        messages<br>    });<br>    <span class="hljs-keyword">await</span> producer.disconnect()<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> producer;<br><br><span class="hljs-comment">//consumer.ts //kafka Consumer</span><br><span class="hljs-keyword">import</span> kafka <span class="hljs-keyword">from</span> <span class="hljs-string">"./kafka"</span>;<br><span class="hljs-keyword">import</span> Config <span class="hljs-keyword">from</span> <span class="hljs-string">"./config"</span>;<br><span class="hljs-keyword">import</span> { ConsumerConfig, EachMessagePayload } <span class="hljs-keyword">from</span> <span class="hljs-string">"kafkajs"</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">consumer</span>(<span class="hljs-params">config: ConsumerConfig</span>) </span>{<br>    <span class="hljs-keyword">const</span> consumer = kafka.consumer(config);<br>    <span class="hljs-keyword">await</span> consumer.connect()<br>    <span class="hljs-keyword">await</span> consumer.subscribe({<br>        <span class="hljs-attr">topic</span>: Config.topic,<br>        <span class="hljs-attr">fromBeginning</span>: <span class="hljs-literal">true</span><br>    });<br>    <span class="hljs-keyword">await</span> consumer.run({<br>        <span class="hljs-attr">eachMessage</span>: <span class="hljs-keyword">async</span> ({topic, partition, message}: EachMessagePayload): <span class="hljs-built_in">Promise</span>&lt;<span class="hljs-keyword">void</span>&gt; =&gt; {<br>            <span class="hljs-built_in">console</span>.log({<br>                <span class="hljs-attr">value</span>: message.value.toString(),<br>                topic,<br>                partition<br>            })<br>        }<br>    })<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> consumer;<br><br><span class="hljs-comment">//index.ts //函数入口</span><br><span class="hljs-keyword">import</span> producer <span class="hljs-keyword">from</span> <span class="hljs-string">"./producer"</span>;<br><span class="hljs-keyword">import</span> consumer <span class="hljs-keyword">from</span> <span class="hljs-string">'./consumer'</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">start</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">await</span> producer([<br>        {<span class="hljs-attr">value</span>: <span class="hljs-string">'Hello'</span>},<br>        {<span class="hljs-attr">value</span>: <span class="hljs-string">','</span>},<br>        {<span class="hljs-attr">value</span>: <span class="hljs-string">'I\'m'</span>},<br>        {<span class="hljs-attr">value</span>: <span class="hljs-string">'kafkajs'</span>}<br>    ])<br><br>    <span class="hljs-keyword">await</span> consumer({<br>        <span class="hljs-attr">groupId</span>: <span class="hljs-string">'consumer-1'</span><br>    })<br>    <span class="hljs-keyword">await</span> consumer({<br>        <span class="hljs-attr">groupId</span>: <span class="hljs-string">'consumer-2'</span><br>    })<br>}<br><br>start()<br>.catch(<span class="hljs-built_in">console</span>.log)<br></code></pre></td></tr></tbody></table></figure><p>然后编译文件，并运行，可以看到我们消息从<code>Producer</code>发送到了<code>Consumer</code></p></li><li><p>接入<code>canal</code></p><p>修改<code>docker-compose.yml</code>，添加<code>canal</code>的镜像和相关配置，同时添加一个测试的<code>mysql</code>镜像（注，由于项目需求，我还配置了<code>wordpress</code>镜像）</p><p><a href="https://github.com/alibaba/canal/wiki/AdminGuide">canal配置说明</a> </p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">...</span><br>  <span class="hljs-attr">canal:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">canal/canal-server:v1.1.4</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.instance.mysql.slaveId=54321</span> <span class="hljs-comment">#slave id 不要与mysql的一样就行</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.instance.master.address=mysql:3306</span> <span class="hljs-comment">#mysql地址</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.instance.dbUsername=kafka</span> <span class="hljs-comment">#mysql 对应的用户名</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.instance.dbPassword=kafka</span> <span class="hljs-comment">#mysql 对应的密码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.instance.parser.parallel=false</span> <span class="hljs-comment">#由于我用的虚拟机，cpu为1G，所以设为false</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.instance.filter.regex=kafka\.user</span> <span class="hljs-comment">#数据库中要监听的表，详细看官方说明</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.mq.dynamicTopic=.*\..*</span> <span class="hljs-comment">#动态生成topic</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.zkServers=zookeeper:2181</span> <span class="hljs-comment">#链接zookeeper集群的链接信息</span><br>      <span class="hljs-comment">#canal.properties 配置</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.serverMode=kafka</span> <span class="hljs-comment">#MQ使用的kafka</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">canal.mq.servers=kafka:9092</span> <span class="hljs-comment">#kafka地址</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">zookeeper</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">kafka</span><br><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./configuration/conf.d/binlog.cnf:/etc/mysql/conf.d/binlog.cnf</span> <span class="hljs-comment">#为了让mysql开启bin_log模式的配置</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root_password_can_you</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">kafkadb</span><br>      <span class="hljs-attr">MYSQL_USER:</span> <span class="hljs-string">kafka</span><br>      <span class="hljs-attr">MYSQL_PASSWORD:</span> <span class="hljs-string">kafka</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span><br><br></code></pre></td></tr></tbody></table></figure><p><code>binlog.cnf</code>配置文件内容，<a href="https://github.com/alibaba/canal/wiki/QuickStart#%E5%87%86%E5%A4%87">canal官方说明</a> </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[mysqld]<br>log-bin=mysql-bin # 开启 binlog<br>binlog-format=ROW # 选择 ROW 模式<br>server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复<br></code></pre></td></tr></tbody></table></figure><p>拉取镜像，启动项目</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker-compose up<br></code></pre></td></tr></tbody></table></figure><p>更改<code>mysql</code>权限 ，使用<code>root</code>登录到<code>mysql</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER kafka IDENTIFIED BY 'kafka';  # 创建与docker-compose.yml中对应的用户和密码<br>GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'kafka'@'%'; #给mysql用户权限<br>-- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ; #也可以给所有权限<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></tbody></table></figure><p>创建一个数据库<code>kafkadb</code>并添加一个<code>user</code>表</p><p>向<code>user</code>表插入数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO user ( `id`, `username`) VALUES ( 1, 'yan');<br></code></pre></td></tr></tbody></table></figure><p>好像没有数据过来（至少我的是这样）</p></li><li><p>排查问题</p><p>首先查看是否镜像运行正常</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker ps <br></code></pre></td></tr></tbody></table></figure><p>发现没有问题，只有依次排查每个镜像日志，先从<code>canal</code>查起</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it &lt;canal 镜像&gt; bash<br><span class="hljs-comment">#然后进入canal-server文件夹</span><br>$ <span class="hljs-built_in">cd</span> canal-server<br>$ cat logs/example/example.log<br><span class="hljs-comment">#发现出错了，以下为片段</span><br><span class="hljs-comment"># Caused by: java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.TimeoutException: Failed to update metadata after 60000 ms.</span><br></code></pre></td></tr></tbody></table></figure><p>百度后，发现和<a href="https://blog.csdn.net/maoyuanming0806/article/details/80553632">这个问题很像</a>，那应该就是我们前面说的<code>kafka</code>的<code>ip</code>设置成<code>localhost</code>导致的，尝试更改一下，问题解决</p><p>再插入数据，可以看到数据被接收到了</p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>其实在部署之间，遇到了很多问题，由于这次是问题重现，有些问题并没有再出现</p><p>例如有自己写的<code>Producer</code>程序推送消息时，报错<code>There is no leader for this topic-partition as we are in the middle of a leadership election</code> 这是由于，没有设置<code>KAFKA_BROKER_ID</code>导致每次构建项目，都重新生成了<code>brokder id</code>，可以在构建项目时在其后添加<code>--no-recreate</code> ，<a href="https://github.com/wurstmeister/kafka-docker/issues/516">可以再这里找到</a> 。记得使用<code>docker-compose rm -vfs</code>删除后再构建项目</p><p>也有<code>zookeeper</code>报错<code>Zookeeper Report Error:KeeperErrorCode = NoNode</code>，<a href="https://github.com/wurstmeister/kafka-docker/issues/427">可以再这里找到</a> </p><p>等等</p></body></html>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>定型数组(typed array)</title>
    <link href="/2021/04/09/%E5%AE%9A%E5%9E%8B%E6%95%B0%E7%BB%84-typed-array/"/>
    <url>/2021/04/09/%E5%AE%9A%E5%9E%8B%E6%95%B0%E7%BB%84-typed-array/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="定型数组（typed-array"><a href="#定型数组（typed-array" class="headerlink" title="定型数组（typed array)"></a>定型数组（typed array)</h1><p>定型数组<code>（typed array）</code>是<code>ECMAScript</code>新增的结构，目的是提升向原生库传输数据的效率。实际上，<code>JavaScript</code>并没有<code>"TypedArray"</code>类型，它所指的其实是一种特殊的包含数值类型的数组</p><h2 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h2><p><code>ArrayBuffer</code>是所有定型数组及视图引用的<strong>基本单位</strong>。</p><blockquote><p><code>SharedArrayBuffer</code>是<code>ArrayBuffer</code>的一个变体，可以无须复制就在执行上下文间传递它</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">//在内存中分配2个字节</span><br><span class="hljs-built_in">console</span>.log(buf)<span class="hljs-comment">//ArrayBuffer(2) {}</span><br><span class="hljs-built_in">console</span>.log(buf.byteLength) <span class="hljs-comment">//2 //返回分配的字节长度</span><br></code></pre></td></tr></tbody></table></figure><p><code>ArrayBuffer</code>一经创建就不能再调整大小</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">16</span>)<br><span class="hljs-keyword">const</span> buf2 = buf.slice(<span class="hljs-number">4</span>, <span class="hljs-number">12</span>) <span class="hljs-comment">//但可以使用slice()复制部分到新的实例中</span><br><span class="hljs-built_in">console</span>.log(buf2.byteLength) <span class="hljs-comment">//8</span><br></code></pre></td></tr></tbody></table></figure><p><code>ArrayBuffer</code>分配的堆内存可以被当成垃圾回收，不用手动释放（相比于<code>C/C++</code>的<code>malloc()</code>）</p><h2 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h2><p><code>DataView</code>用于读写<code>ArrayBuffer</code>的视图。专为文件<code>I/O</code>和网络<code>I/O</code>设计，其<code>API</code>支持对缓冲数据的高度控制，但较其他类型的视图，性能差一些。</p><p>必须对已有的<code>ArrayBuffer</code>进行读/写才能创建<code>DataView</code>实例</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">16</span>)<br><span class="hljs-keyword">const</span> dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataView</span>(buf) <span class="hljs-comment">//默认使用整个ArrayBuffer</span><br><span class="hljs-built_in">console</span>.log(dv) <span class="hljs-comment">//DataView(16) {} </span><br><span class="hljs-built_in">console</span>.log(dv.byteLength) <span class="hljs-comment">//16</span><br><span class="hljs-built_in">console</span>.log(dv.byteOffset) <span class="hljs-comment">//0</span><br><span class="hljs-built_in">console</span>.log(dv.buffer === buf) <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//使用部分ArrayBuffer</span><br><span class="hljs-keyword">const</span> dv2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataView</span>(buf, <span class="hljs-comment">/*offset*/</span><span class="hljs-number">2</span>, <span class="hljs-comment">/*length*/</span><span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(dv2) <span class="hljs-comment">//DataView(4) {}</span><br><span class="hljs-built_in">console</span>.log(dv2.byteLength) <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.log(dv2.byteOffset) <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(dv2.buffer === buf) <span class="hljs-comment">//true</span><br></code></pre></td></tr></tbody></table></figure><p>读取缓冲，需要几个<code>ElementType</code>组件，类似于<code>C</code>中的类型</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">16</span>)<br><span class="hljs-keyword">const</span> dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataView</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>)<br><br><span class="hljs-comment">//说明DataView的实例默认值初始值为0</span><br><span class="hljs-built_in">console</span>.log(dv.getInt8(<span class="hljs-number">0</span>)) <span class="hljs-comment">//0 //以8位有符号整数进行读取,读取第一个字节</span><br><span class="hljs-built_in">console</span>.log(dv.getInt8(<span class="hljs-number">1</span>)) <span class="hljs-comment">//0</span><br><span class="hljs-built_in">console</span>.log(dv.getInt16(<span class="hljs-number">0</span>)) <span class="hljs-comment">//0 //以16位有符号整数进行读取,读取两个字节</span><br><span class="hljs-comment">//写入</span><br>dv.setInt8(<span class="hljs-number">1</span>, <span class="hljs-number">255</span>) <span class="hljs-comment">//给第二个字节写入255，二进制每一位都是1</span><br><span class="hljs-built_in">console</span>.log(dv.getInt8(<span class="hljs-number">1</span>)) <span class="hljs-comment">//-1 //由于是有符号的读，会被当做二补数（即反码）处理，字节开头的1被当作符号位</span><br><span class="hljs-built_in">console</span>.log(dv.getUint8(<span class="hljs-number">1</span>)) <span class="hljs-comment">//255 //无符号读取</span><br></code></pre></td></tr></tbody></table></figure><p>除了上述的类型（<code>Int8, Uint8, Int16</code>）还有<code>Uint16,Int32, Uint32, Float32, Float64 </code>。默认的字节序为大端字节序。传递第二个参数可以决定字节序，为<code>true</code>时，则启用小端字节序</p><blockquote><p><code>DataView</code> 只支持两种约定：大端字节序和小端字节序。大端字节序也称为“网络字节序”，意思是最高有效位保存在第一个字节，而最低有效位保存在最后一个字节。小端字节序正好相反，即最低有效位保存在第一个字节，最高有效位保存在最后一个字节。</p></blockquote><p><code>DataView</code>的读、写操作都必须满足充足的缓冲区，如果越界会抛出<code>RangError</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">const</span> dv = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataView</span>(buf) <span class="hljs-comment">//这里为2个字节</span><br><span class="hljs-comment">//尝试越界读取4个字节</span><br>dv.getInt32(<span class="hljs-number">0</span>) <span class="hljs-comment">//错误 RangeError: Offset is outside the bounds of the DataView</span><br></code></pre></td></tr></tbody></table></figure><h2 id="定型数组"><a href="#定型数组" class="headerlink" title="定型数组"></a>定型数组</h2><p>定型数组是另一种形式的<code>ArrayBffer</code>视图。设计定型数组的目的就是提高与 <code>WebGL</code> 等原生库交换二进制数据的效率。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个12字节的缓冲</span><br><span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">12</span>)<br><span class="hljs-comment">//创建一个引用buf缓冲的Int32Array</span><br><span class="hljs-keyword">const</span> ints = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int32Array</span>(buf)<br><span class="hljs-built_in">console</span>.log(ints) <span class="hljs-comment">//Int32Array(3) [0, 0, 0]</span><br><span class="hljs-comment">//length属性，打印长度</span><br><span class="hljs-built_in">console</span>.log(ints.length) <span class="hljs-comment">//3</span><br><span class="hljs-comment">//与DataView一样，也有一个指向关联缓冲的引用</span><br><span class="hljs-built_in">console</span>.log(ints.buffer) <span class="hljs-comment">//ArrayBuffer(12) {}</span><br><br><span class="hljs-comment">//创建一个指定长度的Int32Array</span><br><span class="hljs-keyword">const</span> ints1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int32Array</span>(<span class="hljs-number">6</span>)<br><span class="hljs-built_in">console</span>.log(ints1.length) <span class="hljs-comment">//6</span><br><br><span class="hljs-comment">//传入数组初始化Int32Array</span><br><span class="hljs-keyword">const</span> ints2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int32Array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><span class="hljs-built_in">console</span>.log(ints2.length) <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.log(ints2[<span class="hljs-number">1</span>]) <span class="hljs-comment">//2</span><br><br><span class="hljs-comment">//通过&lt;ElementType&gt;.from和&lt;ElementType&gt;.to初始化Int32Array</span><br><span class="hljs-keyword">const</span> ints3 = <span class="hljs-built_in">Int32Array</span>.from(ints2)<br><span class="hljs-keyword">const</span> ints4 = <span class="hljs-built_in">Int32Array</span>.of(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>)<br><span class="hljs-built_in">console</span>.log(ints3.length) <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.log(ints4.length) <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.log(ints3[<span class="hljs-number">1</span>]) <span class="hljs-comment">//20</span><br><span class="hljs-built_in">console</span>.log(ints4[<span class="hljs-number">1</span>]) <span class="hljs-comment">//20</span><br><br><span class="hljs-comment">//BYTES_PER_ELEMENT属性返回类型数组中每个元素的大小</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Int32Array</span>.BYTES_PER_ELEMENT) <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Float64Array</span>.BYTES_PER_ELEMENT) <span class="hljs-comment">//8</span><br><span class="hljs-built_in">console</span>.log(ints4.BYTES_PER_ELEMENT) <span class="hljs-comment">//4</span><br></code></pre></td></tr></tbody></table></figure><p>定型数组支持数组的方法和属性，包括<code>Symbol.iterator</code>符号属性，但是没有<code>concat(), poop(), push(), shift(), unshift(), splice()</code>。定型数组提供了两个方法可以实现复制数据：<code>set()</code>和<code>subarray()</code></p><p><code>set()</code>从提供的数组或定型数组中把值复制到当前的定型数组中指定索引位置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> container = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int8Array</span>(<span class="hljs-number">8</span>)<br><span class="hljs-comment">//复制到从偏移量为2的位置开始的地方，默认偏移量为0</span><br>container.set(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Int8Array</span>([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]), <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(container) <span class="hljs-comment">//[0, 0, 2, 3, 4, 5, 0, 0]</span><br><br><span class="hljs-comment">//溢出会抛出错误</span><br>container.set(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Int8Array</span>([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>,<span class="hljs-number">5</span>]), <span class="hljs-number">7</span>) <span class="hljs-comment">//错误 RangeError: offset is out of bounds</span><br></code></pre></td></tr></tbody></table></figure><p><code>subarray()</code>会基于原始定型数组返回复制的值组成新的定型数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> source = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int8Array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><span class="hljs-comment">//复制索引2到4，左闭右开</span><br><span class="hljs-keyword">const</span> newSource = source.subarray(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(newSource) <span class="hljs-comment">// [3, 4]</span><br><span class="hljs-built_in">console</span>.log(newSource) <span class="hljs-comment">//Int8Array(2) [3, 4]</span><br></code></pre></td></tr></tbody></table></figure><p>除了<code>8</code>种元素类型，还有一种”夹板“数组类型：<code>Uint8ClampedArray</code>，用于解决溢出问题。该类型不允许任何方向溢出，超出最大值<code>255</code>的值会被向下舍入为<code>255</code>，而小于最小值<code>0</code>的值会被向上舍入为<code>0</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> clampedInts = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8ClampedArray</span>([-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">256</span>])<br><span class="hljs-built_in">console</span>.log(clampedInts) <span class="hljs-comment">//[0, 0, 255, 255]</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>除非做的和<code>canvas</code>相关开发，否则不要使用它</p></blockquote></body></html>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>执行上下文，作用域和垃圾清理</title>
    <link href="/2021/03/27/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%9E%83%E5%9C%BE%E6%B8%85%E7%90%86/"/>
    <url>/2021/03/27/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%9E%83%E5%9C%BE%E6%B8%85%E7%90%86/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="执行上下文，作用域和垃圾回收"><a href="#执行上下文，作用域和垃圾回收" class="headerlink" title="执行上下文，作用域和垃圾回收"></a>执行上下文，作用域和垃圾回收</h1><p>执行上下文是当前<code>JavaScript</code>代码被解析和执行时所在环境的抽象概念。变量或函数的上下文决定了它们可以访问哪些数据。</p><h2 id="执行上下文的类型"><a href="#执行上下文的类型" class="headerlink" title="执行上下文的类型"></a>执行上下文的类型</h2><p>执行上下文包含全局执行上下文、函数执行上下文和<code>eval</code>执行上下文（不建议使用）</p><p>全局执行上下文：是最外层的上下文，在浏览器环境中就是全局对象<code>window</code>，<code>this</code>指向这个全局对象。全局执行上下文仅此一个</p><p>函数执行上下文：当函数被调用时，会创建一个函数执行上下文并推到一个上下文栈，等到函数执行完，上下文栈会弹出该函数执行上下文。可以存在无数个，且每次调用创建的是一个新的执行上下文</p><p><code>eval</code>函数执行上下文：指的是运行在<code>eval</code>函数中的代码</p><blockquote><ul><li><p>所有通过<code>var</code>定义的全局变量和函数都会成为<code>window</code>对象的属性和方法。使用<code>let</code>和<code>const</code>的顶级声明不会定义在全局上下文中</p></li><li><p>上下文在其所有代码都执行完毕后会被销毁</p></li></ul></blockquote><p>执行栈也叫调用栈，具有<code>LIFO</code>（后进先出）结构，用于存储在代码执行期间创建的执行上下文</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> scope = <span class="hljs-string">'local scope'</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-keyword">let</span> scope = <span class="hljs-string">'local scope'</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-keyword">return</span> scope<br>}<br><span class="hljs-keyword">return</span> fn()<br>}<br>test1() <span class="hljs-comment">//全局执行上下文入栈 =&gt; test1函数执行上下文入栈 =&gt; fn函数执行上下文入栈 =&gt; 执行完fn函数，fn函数执行上下文出栈 =&gt; test1函数执行上下文出栈 =&gt; 全局执行上下文出栈</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-keyword">let</span> scope = <span class="hljs-string">'local scope'</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-keyword">return</span> scope<br>}<br><span class="hljs-keyword">return</span> fn<br>}<br>test2()() <span class="hljs-comment">//全局执行上下文入栈 =&gt; test2函数执行上下文入栈 =&gt; test2函数执行上下文出栈 =&gt; fn函数执行上下文入栈 =&gt; fn函数执行上下文出栈  =&gt; 全局执行上下文出栈</span><br><br><span class="hljs-comment">//执行结果都一样，但是执行上下文栈变化不一样</span><br></code></pre></td></tr></tbody></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>当执行上下文中的代码在执行的时候，会创建变量对象的一个作用域链。这个作用域链决定了各级上下文所能访问到的变量和函数顺序。处在作用域顶端的执行上下文，叫做活动对象。活动对象最初只用<code>arguments</code>。作用域链的中的下一个变量对象来自于包含上下文，再下一个来自于在下一个包含上下文。全局执行上下文的变量对象始终是作用域链的最后一个变量对象。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>垃圾回收有两种策略，标记清除法和引用计数法。现阶段浏览器使用的多为标记清楚法。<br>引用计数无法清除循环引用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">problem</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-keyword">let</span> objectA = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br><span class="hljs-keyword">let</span> objectB = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br><br>objectA.someOtherObject = objectB<br>objectB.anotherObject = objectA<br>}<br><span class="hljs-comment">//objectA和objectB通过各自的属性相互引用，意味着引用数始终都为2</span><br></code></pre></td></tr></tbody></table></figure><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul><li>缺少声明关键字导致的内存泄漏</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>{<br>  name = <span class="hljs-string">'YanXiaoLazy'</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>当调用<code>test()</code>时，会在全局对象<code>window</code>上添加<code>name</code>属性导致内存泄漏，只要<code>window</code>不被清理就不会消失</p><ul><li>定时器导致的内存泄漏</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">'YanXiaoLazy'</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {<br>  <span class="hljs-built_in">console</span>.log(name)<br>}, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></tbody></table></figure><p>定时器的回调通过闭包引用了外部变量。只要定时器一直运行，回调函数中引用的<code>name</code>就会一直占用内存</p><ul><li>使用<code>JavaScript</code>闭包造成的内存泄漏</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> outer = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">'YanXiaoLazy'</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">return</span> name<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>调用<code>outer()</code>会导致分配给<code>name</code>的内存被泄漏</p></body></html>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>var, let, const详解</title>
    <link href="/2021/03/21/var-let-const%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/03/21/var-let-const%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="var-let-const-声明变量详解"><a href="#var-let-const-声明变量详解" class="headerlink" title="var, let, const 声明变量详解"></a>var, let, const 声明变量详解</h1><p><code>var</code> 是<code>ES6</code>之前用来声明变量的关键字，而<code>let</code>和<code>const</code>是<code>ES6</code>之后的版本出现的。<code>let</code>和<code>const</code>是为了解决<code>var</code>带来的得怪异行为。</p><h2 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明"></a>var 声明</h2><p><code>var</code>声明的变量存在变量<strong>提升（hoist</strong>）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(a)<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br>}<br>test() <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></tbody></table></figure><p><code>var</code>声明的变量会先将变量<code>a</code>提升到作用域的顶部（在这里是<code>test</code>函数作用域)，并初始化为<code>undefined</code>，然后等到执行<code>var a = 10</code> 才真正进行变量的赋值，其实现过程相当于</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-literal">undefined</span> <span class="hljs-comment">//变量提升到作用域顶部，并初始化为undefined</span><br>    <span class="hljs-built_in">console</span>.log(a)<br>    a = <span class="hljs-number">10</span><br>}<br>test() <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></tbody></table></figure><p>如果在函数内部声明的变量没有加关键字，则声明的变量会被创建在全局作用域</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    b = <span class="hljs-string">'no var'</span><br>}<br>test() <span class="hljs-comment">//undefined</span><br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//报错 ReferenceError: a is not defined</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//正常输出 no var</span><br></code></pre></td></tr></tbody></table></figure><p>反复多次使用<code>var</code>声明同一个变量也没有问题</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{<br>     <span class="hljs-keyword">var</span> age = <span class="hljs-number">16</span>;<br>     <span class="hljs-keyword">var</span> age = <span class="hljs-number">26</span>;<br>     <span class="hljs-keyword">var</span> age = <span class="hljs-number">36</span>;<br>     <span class="hljs-built_in">console</span>.log(age); <br>}<br>foo(); <span class="hljs-comment">// 36  </span><br><span class="hljs-comment">//引擎会将所有声明的变量提升，合并为一个声明，相当于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-keyword">var</span> age = <span class="hljs-literal">undefined</span><br>     age = <span class="hljs-number">16</span>;<br>     age = <span class="hljs-number">26</span>;<br>     age = <span class="hljs-number">36</span>;<br>     <span class="hljs-built_in">console</span>.log(age); <br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="let-和-const-声明"><a href="#let-和-const-声明" class="headerlink" title="let 和 const 声明"></a>let 和 const 声明</h2><p><code>let</code> 和 <code>const</code> 声明的范围是块作用域，而<code>var</code> 声明的范围是函数作用域。与<code>let</code>不同，<code>const</code>在声明时必须初始化。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//var函数作用域</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-string">'函数作用域'</span><br>    <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//函数作用域</span><br>}<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//函数作用域</span><br><br><span class="hljs-comment">//let和const块作用域</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) {<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-string">'let 块作用域'</span><br>    <span class="hljs-keyword">const</span> b = <span class="hljs-string">'const 块作用域'</span><br>    <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//let 块作用域</span><br>    <span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//const 块作用域</span><br>}<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//报错 ReferenceError: a is not defined</span><br><span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//报错 ReferenceError: b is not defined</span><br></code></pre></td></tr></tbody></table></figure><p>块作用域是函数作用域的子集，因此适用于<code>var</code>的作用域限制同样也适用于<code>let</code></p><p>与<code>var</code>声明不同，<code>let</code>和<code>const</code>不允许同一个块作用域出现冗余声明</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name;<br><span class="hljs-keyword">var</span> name;<br><br><span class="hljs-keyword">let</span> age;<br><span class="hljs-keyword">let</span> age; <span class="hljs-comment">//报错 SyntaxError: Identifier 'age' has already been declared</span><br></code></pre></td></tr></tbody></table></figure><p>但是对于在不同作用域中使用<code>let</code>和<code>const</code>声明是允许的</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">'name'</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>) {<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-string">'another name'</span>; <span class="hljs-comment">//不会报错，且两者是不同的</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>在同一个作用域中，混合使用<code>let</code>和<code>var</code>声明同一个变量也是不允许的</p><p>let和const声明的变量不存在变量提升</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//报错 ReferenceError: a is not defined</span><br><span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">//报错 ReferenceError: Cannot access 'b' before initialization</span><br><br><span class="hljs-keyword">let</span> a;<br><span class="hljs-keyword">const</span> b = <span class="hljs-string">'const 声明的同时必须初始化'</span>;<br><br><span class="hljs-comment">//使用let 和 const 声明的变量，在执行到声明语句之前，会出现“暂时性死区”，在此阶段引用任何后面才声明的变量都会抛出 ReferenceError</span><br></code></pre></td></tr></tbody></table></figure><p>在全局作用域下使用<code>let</code>声明的变量不会成为<code>window</code>对象的属性，但<code>var</code>声明的变量则会</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">'Matt'</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.name); <span class="hljs-comment">// 'Matt'</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">26</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.age); <span class="hljs-comment">// undefined </span><br></code></pre></td></tr></tbody></table></figure><p>const声明的变量只适用于它指向的变量的引用，即引用不可变。如果声明的是一个对象，则对象的属性是可以更改的，但引用不能更改</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> name = <span class="hljs-string">'我不可更改'</span>;<br><span class="hljs-keyword">const</span>  another = {<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">'我是可以变的'</span><br>}<br><br>name = <span class="hljs-string">'我说了，我是不可变的'</span>; <span class="hljs-comment">//报错 TypeError: Assignment to constant variable.</span><br><br>another = <span class="hljs-string">'我声明时保存的是引用，引用也不能变的'</span>; <span class="hljs-comment">//报错 TypeError: Assignment to constant variable.</span><br>another.name = <span class="hljs-string">'我才是自由的'</span>;<br><span class="hljs-built_in">console</span>.log(another) <br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//{</span><br><span class="hljs-comment">//    "name": "我才是自由的"</span><br><span class="hljs-comment">//}</span><br></code></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单行文本溢出和多行文本溢出处理</title>
    <link href="/2021/03/10/%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%92%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/"/>
    <url>/2021/03/10/%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%92%8C%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="单行文本溢出和多行文本溢出"><a href="#单行文本溢出和多行文本溢出" class="headerlink" title="单行文本溢出和多行文本溢出"></a>单行文本溢出和多行文本溢出</h1><p>当文本太长，总是会想怎么优雅的省略多余的部分，既美观又好看，因此试着尝试文本溢出处理来解决。</p><p>注：以下为 <code>...</code> 格式的溢出代码</p><h2 id="单行文本溢出"><a href="#单行文本溢出" class="headerlink" title="单行文本溢出"></a>单行文本溢出</h2><p>单行文本溢出需要满足以下条件</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.overflow</span>{<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  <span class="hljs-attribute">white-space</span>: nowrap;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h2><p>多行文本溢出并不是CSS规范草案，是webkit的私有属性，满足条件</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.overflow</span> {<br>  <span class="hljs-attribute">display</span>: -webkit-box;<br>  -webkit-line-clamp: <span class="hljs-number">2</span>;<br>  -webkit-box-orient: vertical;<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>-webkit-line-clamp</code>  用来限制在一个块元素显示的文本的行数</p><p><code>display: -webkit-box</code> 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示</p><p><code>-webkit-box-orient</code> 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式</p></body></html>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加自定义滚动条</title>
    <link href="/2021/03/05/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    <url>/2021/03/05/%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="添加自定义滚动条"><a href="#添加自定义滚动条" class="headerlink" title="添加自定义滚动条"></a>添加自定义滚动条</h1><p>很多时候，系统自带的效果总是丑的不行，例如滚动条。当内容超出容器时，就会出现滚动条（水平或垂直），接下来我们就用css来干掉这个系统原始的滚动条。</p><p>滚动条样式主要由三部分组成：</p><ul><li>::-webkit-scrollbar    定义滚动条整体的样式</li><li>::-webkit-scrollbar-thumb 滑块部分</li><li>::-webkit-scrollbar-track  轨道部分</li></ul><p>设置滚动条宽高</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-scrollbar {<br>  width: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>设置滑块样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-scrollbar-thumb {<br>  border-radius: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#535353</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>设置轨道样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-scrollbar-track {<br>  box-shadow: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#EDEDED</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="如果需要用到自定义的容器中"><a href="#如果需要用到自定义的容器中" class="headerlink" title="如果需要用到自定义的容器中"></a>如果需要用到自定义的容器中</h2><p>html示例代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>自定义容器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>自定义容器<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>css示例代码</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> {<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">overflow-y</span>: auto; //<span class="hljs-attribute">auto</span> 当容器内容没有超过设定的高度时，不会出现滚动条 scroll 不管有无内容都会出现滚动条 <br>    <span class="hljs-attribute">overflow-x</span>: hidden //这里我隐藏了水平上的滚动条<br>}<br>//设置滚动条宽高<br><span class="hljs-selector-tag">ul</span>::-webkit-scrollbar {<br>    width: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">380px</span>;<br>}<br>//设置滑块样式<br><span class="hljs-selector-tag">ul</span>::-webkit-scrollbar-thumb {<br>  border-radius: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#535353</span>;<br>}<br>//设置轨道样式<br><span class="hljs-selector-tag">ul</span>::-webkit-scrollbar-track {<br>  box-shadow: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#EDEDED</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><p>效果展示</p><p><img src="/img/self-define-scroller.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/lfhy/p/6796653.html">CSS3自定义滚动条样式 -webkit-scrollbar</a></p></body></html>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
